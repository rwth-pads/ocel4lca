// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class DefaultService {
    /**
     * Task status
     * Return the status of a long-running task.
     * @param data The data for the request.
     * @param data.taskId
     * @param data.oceanSessionId
     * @returns TaskStatusResponse Successful Response
     * @throws ApiError
     */
    public static taskStatusTaskStatusGet(data: $OpenApiTs['/task-status']['get']['req']): CancelablePromise<$OpenApiTs['/task-status']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/task-status',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            query: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Validates an emission rule and computes a display name
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns ValidateEmissionRuleResponse Successful Response
     * @throws ApiError
     */
    public static validateEmissionRuleValidateEmissionRulePost(data: $OpenApiTs['/validate-emission-rule']['post']['req']): CancelablePromise<$OpenApiTs['/validate-emission-rule']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/validate-emission-rule',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Available Attributes For Emission Rule
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns GetAvailableAttributesResponse Successful Response
     * @throws ApiError
     */
    public static getAvailableAttributesForEmissionRuleGetAvailableAttributesPost(data: $OpenApiTs['/get-available-attributes']['post']['req']): CancelablePromise<$OpenApiTs['/get-available-attributes']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/get-available-attributes',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Compute emissions
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static computeEmissionsComputeEmissionsPost(data: $OpenApiTs['/compute-emissions']['post']['req']): CancelablePromise<$OpenApiTs['/compute-emissions']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/compute-emissions',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Directly-follows graph discovery
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns WeightedDirectedGraphResponse Successful Response
     * @throws ApiError
     */
    public static discoverDfgDfgPost(data: $OpenApiTs['/dfg']['post']['req']): CancelablePromise<$OpenApiTs['/dfg']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/dfg',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Eventually-follows graph discovery
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns DirectedGraphResponse Successful Response
     * @throws ApiError
     */
    public static discoverEfgEfgPost(data: $OpenApiTs['/efg']['post']['req']): CancelablePromise<$OpenApiTs['/efg']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/efg',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * OCPN discovery
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns OcpnResponse Successful Response
     * @throws ApiError
     */
    public static ocpnOcpnPost(data: $OpenApiTs['/ocpn']['post']['req']): CancelablePromise<$OpenApiTs['/ocpn']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ocpn',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Allocate emissions from events to objects
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns ObjectAllocationResponse Successful Response
     * @throws ApiError
     */
    public static objectAllocationObjectAllocationPost(data: $OpenApiTs['/object-allocation']['post']['req']): CancelablePromise<$OpenApiTs['/object-allocation']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/object-allocation',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import OCEL
     * @param data The data for the request.
     * @param data.name The name of the uploaded file
     * @param data.formData
     * @returns OcelResponse Successful Response
     * @throws ApiError
     */
    public static importOcelImportPost(data: $OpenApiTs['/import']['post']['req']): CancelablePromise<$OpenApiTs['/import']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/import',
            query: {
                name: data.name
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import default OCEL
     * @param data The data for the request.
     * @param data.key Default OCEL key
     * @param data.version Dataset version (optional)
     * @returns OcelResponse Successful Response
     * @throws ApiError
     */
    public static importDefaultOcelImportDefaultGet(data: $OpenApiTs['/import-default']['get']['req']): CancelablePromise<$OpenApiTs['/import-default']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/import-default',
            query: {
                key: data.key,
                version: data.version
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Load OCEL
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @returns OcelResponse Successful Response
     * @throws ApiError
     */
    public static loadOcelLoadGet(data: $OpenApiTs['/load']['get']['req']): CancelablePromise<$OpenApiTs['/load']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/load',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download OCEL including app state
     * @param data The data for the request.
     * @param data.token
     * @param data.oceanSessionId
     * @param data.emissions Controls on what level emission values are included in the resulting OCEL file as a new attribute. To preserve overall emissions, it is not possible to include both event and object emissions.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadOcelDownloadGet(data: $OpenApiTs['/download']['get']['req']): CancelablePromise<$OpenApiTs['/download']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/download',
            headers: {
                token: data.token,
                'Ocean-Session-Id': data.oceanSessionId
            },
            query: {
                emissions: data.emissions
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update user input
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @param data.requestBody
     * @returns UpdateAppStateResponse Successful Response
     * @throws ApiError
     */
    public static updateStateUpdatePut(data: $OpenApiTs['/update']['put']['req']): CancelablePromise<$OpenApiTs['/update']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/update',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sample objects
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @returns SampleObjectsResponse Successful Response
     * @throws ApiError
     */
    public static sampleObjectsSampleObjectsGet(data: $OpenApiTs['/sample-objects']['get']['req']): CancelablePromise<$OpenApiTs['/sample-objects']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/sample-objects',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sample events
     * @param data The data for the request.
     * @param data.oceanSessionId
     * @returns SampleEventsResponse Successful Response
     * @throws ApiError
     */
    public static sampleEventsSampleEventsGet(data: $OpenApiTs['/sample-events']['get']['req']): CancelablePromise<$OpenApiTs['/sample-events']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/sample-events',
            headers: {
                'Ocean-Session-Id': data.oceanSessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get default OCEL metadata
     * @param data The data for the request.
     * @param data.onlyLatestVersions
     * @param data.onlyPreloaded
     * @returns DefaultOCEL Successful Response
     * @throws ApiError
     */
    public static defaultOcelsOcelDefaultGet(data: $OpenApiTs['/ocel/default']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/ocel/default']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ocel/default',
            query: {
                only_latest_versions: data.onlyLatestVersions,
                only_preloaded: data.onlyPreloaded
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get list of climatiq units
     * @returns ClimatiqUnitType Successful Response
     * @throws ApiError
     */
    public static getClimatiqUnitsClimatiqUnitsListGet(): CancelablePromise<$OpenApiTs['/climatiq/units/list']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/climatiq/units/list'
        });
    }
    
    /**
     * Search for a unit
     * @param data The data for the request.
     * @param data.q
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static unitSearchUnitsSearchGet(data: $OpenApiTs['/units/search']['get']['req']): CancelablePromise<$OpenApiTs['/units/search']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/units/search',
            query: {
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}