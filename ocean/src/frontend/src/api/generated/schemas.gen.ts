// This file is auto-generated by @hey-api/openapi-ts

export const $AppState_Input = {
    properties: {
        objectTypeColors: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string',
                        pattern: '#?(?:[0-9a-fA-F]{3}){1,2}'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objecttypecolors'
        },
        objectTypeClasses: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string',
                        enum: ['handling_unit', 'resource']
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objecttypeclasses'
        },
        attributeUnits: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventAttributeDefinition'
                            },
                            {
                                '$ref': '#/components/schemas/ObjectAttributeDefinition'
                            }
                        ],
                        discriminator: {
                            propertyName: 'target',
                            mapping: {
                                event: '#/components/schemas/EventAttributeDefinition',
                                object: '#/components/schemas/ObjectAttributeDefinition'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attributeunits'
        },
        emissionAttributes: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventAttributeDefinition'
                            },
                            {
                                '$ref': '#/components/schemas/ObjectAttributeDefinition'
                            }
                        ],
                        discriminator: {
                            propertyName: 'target',
                            mapping: {
                                event: '#/components/schemas/EventAttributeDefinition',
                                object: '#/components/schemas/ObjectAttributeDefinition'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emissionattributes'
        },
        emissionRules: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventEmissionRule-Input'
                            },
                            {
                                '$ref': '#/components/schemas/E2OEmissionRule-Input'
                            }
                        ],
                        discriminator: {
                            propertyName: 'type',
                            mapping: {
                                E2OEmissionRule: '#/components/schemas/E2OEmissionRule-Input',
                                EventEmissionRule: '#/components/schemas/EventEmissionRule-Input'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emissionrules'
        },
        objectAllocationConfig: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ObjectAllocationConfig'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'AppState'
} as const;

export const $AppState_Output = {
    properties: {
        objectTypeColors: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string',
                        pattern: '#?(?:[0-9a-fA-F]{3}){1,2}'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objecttypecolors'
        },
        objectTypeClasses: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string',
                        enum: ['handling_unit', 'resource']
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objecttypeclasses'
        },
        attributeUnits: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventAttributeDefinition'
                            },
                            {
                                '$ref': '#/components/schemas/ObjectAttributeDefinition'
                            }
                        ],
                        discriminator: {
                            propertyName: 'target',
                            mapping: {
                                event: '#/components/schemas/EventAttributeDefinition',
                                object: '#/components/schemas/ObjectAttributeDefinition'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attributeunits'
        },
        emissionAttributes: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventAttributeDefinition'
                            },
                            {
                                '$ref': '#/components/schemas/ObjectAttributeDefinition'
                            }
                        ],
                        discriminator: {
                            propertyName: 'target',
                            mapping: {
                                event: '#/components/schemas/EventAttributeDefinition',
                                object: '#/components/schemas/ObjectAttributeDefinition'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emissionattributes'
        },
        emissionRules: {
            anyOf: [
                {
                    items: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/EventEmissionRule-Output'
                            },
                            {
                                '$ref': '#/components/schemas/E2OEmissionRule-Output'
                            }
                        ],
                        discriminator: {
                            propertyName: 'type',
                            mapping: {
                                E2OEmissionRule: '#/components/schemas/E2OEmissionRule-Output',
                                EventEmissionRule: '#/components/schemas/EventEmissionRule-Output'
                            }
                        }
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emissionrules'
        },
        objectAllocationConfig: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ObjectAllocationConfig'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'AppState'
} as const;

export const $Arc = {
    properties: {
        source: {
            type: 'string',
            title: 'Source'
        },
        target: {
            type: 'string',
            title: 'Target'
        },
        double: {
            type: 'boolean',
            title: 'Double'
        }
    },
    type: 'object',
    required: ['source', 'target', 'double'],
    title: 'Arc'
} as const;

export const $BaseResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['session', 'route', 'state'],
    title: 'BaseResponse'
} as const;

export const $Body_import_ocel_import_post = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File',
            description: 'An OCEL 2.0 event log (.sqlite format)'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_import_ocel_import_post'
} as const;

export const $ClimatiqDataVersionInformationRemoved = {
    properties: {
        status: {
            type: 'string',
            enum: ['removed'],
            const: 'removed',
            title: 'Status'
        },
        replacedIn: {
            type: 'string',
            title: 'Replacedin'
        }
    },
    type: 'object',
    required: ['status', 'replacedIn'],
    title: 'ClimatiqDataVersionInformationRemoved'
} as const;

export const $ClimatiqDataVersionInformationReplaced = {
    properties: {
        status: {
            type: 'string',
            enum: ['replaced'],
            const: 'replaced',
            title: 'Status'
        },
        replacedIn: {
            type: 'string',
            title: 'Replacedin'
        },
        replacedBy: {
            type: 'string',
            title: 'Replacedby'
        }
    },
    type: 'object',
    required: ['status', 'replacedIn', 'replacedBy'],
    title: 'ClimatiqDataVersionInformationReplaced'
} as const;

export const $ClimatiqDataVersionInformationUpToDate = {
    properties: {
        status: {
            type: 'string',
            enum: ['up_to_date'],
            const: 'up_to_date',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'ClimatiqDataVersionInformationUpToDate'
} as const;

export const $ClimatiqEmissionFactor_Input = {
    properties: {
        source: {
            type: 'string',
            enum: ['climatiq'],
            const: 'climatiq',
            title: 'Source'
        },
        attributes: {
            items: {
                '$ref': '#/components/schemas/QualifiedAttribute'
            },
            type: 'array',
            title: 'Attributes'
        },
        data: {
            '$ref': '#/components/schemas/ClimatiqEmissionFactorDetails'
        },
        value: {
            anyOf: [
                {
                    properties: {
                        value: {
                            type: 'number',
                            title: 'Value'
                        },
                        unit: {
                            anyOf: [
                                {
                                    properties: {
                                        symbol: {
                                            anyOf: [
                                                {
                                                    type: 'string'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            title: 'Symbol',
                                            description: 'Unit symbol',
                                            examples: ['m/s']
                                        },
                                        name: {
                                            anyOf: [
                                                {
                                                    type: 'string'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            title: 'Name',
                                            description: 'Long name of the unit',
                                            examples: ['meter/second']
                                        },
                                        dim: {
                                            additionalProperties: {
                                                type: 'integer'
                                            },
                                            type: 'object',
                                            title: 'Dim',
                                            description: 'The unit dimensionality, compatible with the `pint` python package',
                                            examples: [
                                                {
                                                    '[length]': 1,
                                                    '[time]': -1
                                                }
                                            ]
                                        }
                                    },
                                    type: 'object',
                                    required: ['symbol', 'name', 'dim'],
                                    title: 'Unit',
                                    description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Unit'
                        }
                    },
                    type: 'object',
                    required: ['value'],
                    title: 'Quantity',
                    description: 'A quantity (physical, currency, ...), containing a value and (optionally) a unit.'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.'
        }
    },
    type: 'object',
    required: ['source', 'attributes', 'data'],
    title: 'ClimatiqEmissionFactor'
} as const;

export const $ClimatiqEmissionFactor_Output = {
    properties: {
        source: {
            type: 'string',
            enum: ['climatiq'],
            const: 'climatiq',
            title: 'Source'
        },
        attributes: {
            items: {
                '$ref': '#/components/schemas/QualifiedAttribute'
            },
            type: 'array',
            title: 'Attributes'
        },
        data: {
            '$ref': '#/components/schemas/ClimatiqEmissionFactorDetails'
        },
        value: {
            anyOf: [
                {
                    properties: {
                        value: {
                            type: 'number',
                            title: 'Value'
                        },
                        unit: {
                            anyOf: [
                                {
                                    properties: {
                                        symbol: {
                                            anyOf: [
                                                {
                                                    type: 'string'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            title: 'Symbol',
                                            description: 'Unit symbol',
                                            examples: ['m/s']
                                        },
                                        name: {
                                            anyOf: [
                                                {
                                                    type: 'string'
                                                },
                                                {
                                                    type: 'null'
                                                }
                                            ],
                                            title: 'Name',
                                            description: 'Long name of the unit',
                                            examples: ['meter/second']
                                        },
                                        dim: {
                                            additionalProperties: {
                                                type: 'integer'
                                            },
                                            type: 'object',
                                            title: 'Dim',
                                            description: 'The unit dimensionality, compatible with the `pint` python package',
                                            examples: [
                                                {
                                                    '[length]': 1,
                                                    '[time]': -1
                                                }
                                            ]
                                        }
                                    },
                                    type: 'object',
                                    required: ['symbol', 'name', 'dim'],
                                    title: 'Unit',
                                    description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Unit'
                        }
                    },
                    type: 'object',
                    required: ['value'],
                    title: 'Quantity',
                    description: 'A quantity (physical, currency, ...), containing a value and (optionally) a unit.'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.'
        }
    },
    type: 'object',
    required: ['source', 'attributes', 'data'],
    title: 'ClimatiqEmissionFactor'
} as const;

export const $ClimatiqEmissionFactorDetails = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        activityId: {
            type: 'string',
            title: 'Activityid'
        },
        accessType: {
            type: 'string',
            enum: ['private', 'public'],
            title: 'Accesstype'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        sector: {
            type: 'string',
            title: 'Sector'
        },
        source: {
            type: 'string',
            title: 'Source'
        },
        sourceLink: {
            type: 'string',
            title: 'Sourcelink'
        },
        uncertainty: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uncertainty'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        yearReleased: {
            type: 'integer',
            title: 'Yearreleased'
        },
        region: {
            type: 'string',
            title: 'Region'
        },
        regionName: {
            type: 'string',
            title: 'Regionname'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        unitType: {
            type: 'string',
            title: 'Unittype'
        },
        sourceLcaActivity: {
            type: 'string',
            title: 'Sourcelcaactivity'
        },
        supportedCalculationMethods: {
            items: {
                type: 'string',
                enum: ['ar4', 'ar5', 'ar6']
            },
            type: 'array',
            title: 'Supportedcalculationmethods'
        },
        factor: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Factor'
        },
        factorCalculationMethod: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['ar4', 'ar5', 'ar6']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Factorcalculationmethod'
        },
        constituentGases: {
            additionalProperties: {
                anyOf: [
                    {
                        type: 'number'
                    },
                    {
                        type: 'null'
                    }
                ]
            },
            type: 'object',
            title: 'Constituentgases'
        },
        dataVersionInformation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ClimatiqDataVersionInformationUpToDate'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqDataVersionInformationReplaced'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqDataVersionInformationRemoved'
                }
            ],
            title: 'Dataversioninformation',
            discriminator: {
                propertyName: 'status',
                mapping: {
                    removed: '#/components/schemas/ClimatiqDataVersionInformationRemoved',
                    replaced: '#/components/schemas/ClimatiqDataVersionInformationReplaced',
                    up_to_date: '#/components/schemas/ClimatiqDataVersionInformationUpToDate'
                }
            }
        }
    },
    type: 'object',
    required: ['id', 'activityId', 'accessType', 'name', 'category', 'sector', 'source', 'sourceLink', 'year', 'yearReleased', 'region', 'regionName', 'description', 'unit', 'unitType', 'sourceLcaActivity', 'supportedCalculationMethods', 'constituentGases', 'dataVersionInformation'],
    title: 'ClimatiqEmissionFactorDetails'
} as const;

export const $ClimatiqUnitType = {
    properties: {
        unitType: {
            type: 'string',
            title: 'Unittype',
            examples: ['Weight', 'DistancceOverTime']
        },
        units: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Units',
            examples: [
                {
                    weight_unit: ['g', 'kg', 't', 'lb', 'ton']
                },
                {
                    distance_unit: ['m', 'km', 'ft', 'mi', 'nmi'],
                    time_unit: ['ms', 's', 'm', 'h', 'day', 'year']
                }
            ]
        }
    },
    type: 'object',
    required: ['unitType', 'units'],
    title: 'ClimatiqUnitType'
} as const;

export const $ComputeEmissionsRequestBody = {
    properties: {
        rules: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/EventEmissionRule-Input'
                    },
                    {
                        '$ref': '#/components/schemas/E2OEmissionRule-Input'
                    }
                ],
                discriminator: {
                    propertyName: 'type',
                    mapping: {
                        E2OEmissionRule: '#/components/schemas/E2OEmissionRule-Input',
                        EventEmissionRule: '#/components/schemas/EventEmissionRule-Input'
                    }
                }
            },
            type: 'array',
            title: 'Rules'
        }
    },
    type: 'object',
    required: ['rules'],
    title: 'ComputeEmissionsRequestBody'
} as const;

export const $ComputeEmissionsResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['session', 'route', 'state'],
    title: 'ComputeEmissionsResponse'
} as const;

export const $DefaultOCEL = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        version: {
            type: 'string',
            title: 'Version'
        },
        file: {
            type: 'string',
            title: 'File'
        },
        url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Url'
        },
        preload: {
            type: 'boolean',
            title: 'Preload',
            default: false
        },
        hide: {
            type: 'boolean',
            title: 'Hide',
            default: false
        }
    },
    type: 'object',
    required: ['key', 'name', 'version', 'file'],
    title: 'DefaultOCEL',
    description: 'Definition of a default OCEL on the server, for quick access. Supports pre-loading the OCEL on backend init.'
} as const;

export const $DirectedGraphResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        graph: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array',
                uniqueItems: true
            },
            type: 'object',
            title: 'Graph'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'graph'],
    title: 'DirectedGraphResponse'
} as const;

export const $E2OEmissionRule_Input = {
    properties: {
        index: {
            type: 'integer',
            title: 'Index'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        factor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/LocalEmissionFactor-Input'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqEmissionFactor-Input'
                }
            ],
            title: 'Factor',
            discriminator: {
                propertyName: 'source',
                mapping: {
                    climatiq: '#/components/schemas/ClimatiqEmissionFactor-Input',
                    local: '#/components/schemas/LocalEmissionFactor-Input'
                }
            }
        },
        ignoreUnit: {
            type: 'boolean',
            title: 'Ignoreunit',
            description: 'Disables validation of the result unit being a weight.',
            default: false
        },
        type: {
            type: 'string',
            enum: ['E2OEmissionRule'],
            const: 'E2OEmissionRule',
            title: 'Type'
        },
        objectType: {
            type: 'string',
            title: 'Objecttype'
        },
        qualifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Qualifier'
        }
    },
    type: 'object',
    required: ['index', 'activity', 'factor', 'type', 'objectType'],
    title: 'E2OEmissionRule'
} as const;

export const $E2OEmissionRule_Output = {
    properties: {
        index: {
            type: 'integer',
            title: 'Index'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        factor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/LocalEmissionFactor-Output'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqEmissionFactor-Output'
                }
            ],
            title: 'Factor',
            discriminator: {
                propertyName: 'source',
                mapping: {
                    climatiq: '#/components/schemas/ClimatiqEmissionFactor-Output',
                    local: '#/components/schemas/LocalEmissionFactor-Output'
                }
            }
        },
        type: {
            type: 'string',
            enum: ['E2OEmissionRule'],
            const: 'E2OEmissionRule',
            title: 'Type'
        },
        objectType: {
            type: 'string',
            title: 'Objecttype'
        },
        qualifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Qualifier'
        },
        defaultName: {
            type: 'string',
            title: 'Defaultname',
            readOnly: true
        }
    },
    type: 'object',
    required: ['index', 'activity', 'factor', 'type', 'objectType', 'defaultName'],
    title: 'E2OEmissionRule'
} as const;

export const $EmissionsState = {
    properties: {
        hasImportedEmissions: {
            type: 'boolean',
            title: 'Hasimportedemissions',
            default: false
        },
        hasRuleBasedEmissions: {
            type: 'boolean',
            title: 'Hasrulebasedemissions',
            default: false
        },
        hasObjectEmissions: {
            type: 'boolean',
            title: 'Hasobjectemissions'
        },
        hasEmissions: {
            type: 'boolean',
            title: 'Hasemissions',
            readOnly: true
        }
    },
    type: 'object',
    required: ['hasObjectEmissions', 'hasEmissions'],
    title: 'EmissionsState'
} as const;

export const $EventAttributeDefinition = {
    properties: {
        target: {
            type: 'string',
            enum: ['event'],
            const: 'event',
            title: 'Target'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        unit: {
            anyOf: [
                {
                    properties: {
                        symbol: {
                            anyOf: [
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Symbol',
                            description: 'Unit symbol',
                            examples: ['m/s']
                        },
                        name: {
                            anyOf: [
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Name',
                            description: 'Long name of the unit',
                            examples: ['meter/second']
                        },
                        dim: {
                            additionalProperties: {
                                type: 'integer'
                            },
                            type: 'object',
                            title: 'Dim',
                            description: 'The unit dimensionality, compatible with the `pint` python package',
                            examples: [
                                {
                                    '[length]': 1,
                                    '[time]': -1
                                }
                            ]
                        }
                    },
                    type: 'object',
                    required: ['symbol', 'name', 'dim'],
                    title: 'Unit',
                    description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Unit'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        }
    },
    type: 'object',
    required: ['target', 'name', 'activity'],
    title: 'EventAttributeDefinition'
} as const;

export const $EventEmissionRule_Input = {
    properties: {
        index: {
            type: 'integer',
            title: 'Index'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        factor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/LocalEmissionFactor-Input'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqEmissionFactor-Input'
                }
            ],
            title: 'Factor',
            discriminator: {
                propertyName: 'source',
                mapping: {
                    climatiq: '#/components/schemas/ClimatiqEmissionFactor-Input',
                    local: '#/components/schemas/LocalEmissionFactor-Input'
                }
            }
        },
        ignoreUnit: {
            type: 'boolean',
            title: 'Ignoreunit',
            description: 'Disables validation of the result unit being a weight.',
            default: false
        },
        type: {
            type: 'string',
            enum: ['EventEmissionRule'],
            const: 'EventEmissionRule',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['index', 'activity', 'factor', 'type'],
    title: 'EventEmissionRule'
} as const;

export const $EventEmissionRule_Output = {
    properties: {
        index: {
            type: 'integer',
            title: 'Index'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        factor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/LocalEmissionFactor-Output'
                },
                {
                    '$ref': '#/components/schemas/ClimatiqEmissionFactor-Output'
                }
            ],
            title: 'Factor',
            discriminator: {
                propertyName: 'source',
                mapping: {
                    climatiq: '#/components/schemas/ClimatiqEmissionFactor-Output',
                    local: '#/components/schemas/LocalEmissionFactor-Output'
                }
            }
        },
        type: {
            type: 'string',
            enum: ['EventEmissionRule'],
            const: 'EventEmissionRule',
            title: 'Type'
        },
        defaultName: {
            type: 'string',
            title: 'Defaultname',
            readOnly: true
        }
    },
    type: 'object',
    required: ['index', 'activity', 'factor', 'type', 'defaultName'],
    title: 'EventEmissionRule'
} as const;

export const $GetAvailableAttributesRequest = {
    properties: {
        type: {
            type: 'string',
            enum: ['EventEmissionRule', 'E2OEmissionRule'],
            title: 'Type'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        objectType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objecttype'
        },
        qualifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Qualifier'
        },
        numericOnly: {
            type: 'boolean',
            title: 'Numericonly',
            default: false
        }
    },
    type: 'object',
    required: ['type', 'activity'],
    title: 'GetAvailableAttributesRequest'
} as const;

export const $GetAvailableAttributesResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        availableEventAttributes: {
            items: {
                '$ref': '#/components/schemas/EventAttributeDefinition'
            },
            type: 'array',
            title: 'Availableeventattributes'
        },
        availableObjectAttributes: {
            items: {
                prefixItems: [
                    {
                        type: 'string'
                    },
                    {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    },
                    {
                        '$ref': '#/components/schemas/ObjectAttributeDefinition'
                    }
                ],
                type: 'array',
                maxItems: 3,
                minItems: 3
            },
            type: 'array',
            title: 'Availableobjectattributes'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'availableEventAttributes', 'availableObjectAttributes'],
    title: 'GetAvailableAttributesResponse'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $LocalEmissionFactor_Input = {
    properties: {
        source: {
            type: 'string',
            enum: ['local'],
            const: 'local',
            title: 'Source'
        },
        attributes: {
            items: {
                '$ref': '#/components/schemas/QualifiedAttribute'
            },
            type: 'array',
            title: 'Attributes'
        },
        value: {
            properties: {
                value: {
                    type: 'number',
                    title: 'Value'
                },
                unit: {
                    anyOf: [
                        {
                            properties: {
                                symbol: {
                                    anyOf: [
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    title: 'Symbol',
                                    description: 'Unit symbol',
                                    examples: ['m/s']
                                },
                                name: {
                                    anyOf: [
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    title: 'Name',
                                    description: 'Long name of the unit',
                                    examples: ['meter/second']
                                },
                                dim: {
                                    additionalProperties: {
                                        type: 'integer'
                                    },
                                    type: 'object',
                                    title: 'Dim',
                                    description: 'The unit dimensionality, compatible with the `pint` python package',
                                    examples: [
                                        {
                                            '[length]': 1,
                                            '[time]': -1
                                        }
                                    ]
                                }
                            },
                            type: 'object',
                            required: ['symbol', 'name', 'dim'],
                            title: 'Unit',
                            description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    title: 'Unit'
                }
            },
            type: 'object',
            required: ['value'],
            title: 'Quantity',
            description: 'A quantity (physical, currency, ...), containing a value and (optionally) a unit.'
        }
    },
    type: 'object',
    required: ['source', 'attributes', 'value'],
    title: 'LocalEmissionFactor'
} as const;

export const $LocalEmissionFactor_Output = {
    properties: {
        source: {
            type: 'string',
            enum: ['local'],
            const: 'local',
            title: 'Source'
        },
        attributes: {
            items: {
                '$ref': '#/components/schemas/QualifiedAttribute'
            },
            type: 'array',
            title: 'Attributes'
        },
        value: {
            properties: {
                value: {
                    type: 'number',
                    title: 'Value'
                },
                unit: {
                    anyOf: [
                        {
                            properties: {
                                symbol: {
                                    anyOf: [
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    title: 'Symbol',
                                    description: 'Unit symbol',
                                    examples: ['m/s']
                                },
                                name: {
                                    anyOf: [
                                        {
                                            type: 'string'
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ],
                                    title: 'Name',
                                    description: 'Long name of the unit',
                                    examples: ['meter/second']
                                },
                                dim: {
                                    additionalProperties: {
                                        type: 'integer'
                                    },
                                    type: 'object',
                                    title: 'Dim',
                                    description: 'The unit dimensionality, compatible with the `pint` python package',
                                    examples: [
                                        {
                                            '[length]': 1,
                                            '[time]': -1
                                        }
                                    ]
                                }
                            },
                            type: 'object',
                            required: ['symbol', 'name', 'dim'],
                            title: 'Unit',
                            description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    title: 'Unit'
                }
            },
            type: 'object',
            required: ['value'],
            title: 'Quantity',
            description: 'A quantity (physical, currency, ...), containing a value and (optionally) a unit.'
        }
    },
    type: 'object',
    required: ['source', 'attributes', 'value'],
    title: 'LocalEmissionFactor'
} as const;

export const $NumberStats = {
    properties: {
        empty: {
            type: 'boolean',
            title: 'Empty'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        sum: {
            type: 'number',
            title: 'Sum'
        },
        mean: {
            type: 'number',
            title: 'Mean'
        },
        min: {
            type: 'number',
            title: 'Min'
        },
        median: {
            type: 'number',
            title: 'Median'
        },
        max: {
            type: 'number',
            title: 'Max'
        },
        nonzero: {
            type: 'number',
            title: 'Nonzero'
        }
    },
    type: 'object',
    required: ['empty', 'count', 'sum', 'mean', 'min', 'median', 'max', 'nonzero'],
    title: 'NumberStats'
} as const;

export const $OCPN = {
    properties: {
        objectTypes: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Objecttypes'
        },
        dotString: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Dotstring'
        },
        structure: {
            '$ref': '#/components/schemas/OcpnStructure'
        }
    },
    type: 'object',
    required: ['objectTypes', 'dotString', 'structure'],
    title: 'OCPN'
} as const;

export const $ObjectAllocationConfig = {
    properties: {
        targetObjectTypes: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Targetobjecttypes'
        },
        rule: {
            type: 'string',
            enum: ['AllTargets', 'ParticipatingTargets', 'ClosestTargets'],
            title: 'Rule'
        },
        graphMode: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['full', 'HU']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Graphmode'
        },
        removeOtypeLoops: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Removeotypeloops'
        },
        maxDistance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'boolean',
                    enum: [false],
                    const: false
                },
                {
                    type: 'null'
                }
            ],
            title: 'Maxdistance'
        }
    },
    type: 'object',
    required: ['targetObjectTypes', 'rule'],
    title: 'ObjectAllocationConfig'
} as const;

export const $ObjectAllocationRequestBody = {
    properties: {
        objectAllocationConfig: {
            '$ref': '#/components/schemas/ObjectAllocationConfig'
        }
    },
    type: 'object',
    required: ['objectAllocationConfig'],
    title: 'ObjectAllocationRequestBody'
} as const;

export const $ObjectAllocationResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        objectAllocationConfig: {
            '$ref': '#/components/schemas/ObjectAllocationConfig'
        },
        objectEmissions: {
            additionalProperties: {
                type: 'number'
            },
            type: 'object',
            title: 'Objectemissions'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'objectAllocationConfig', 'objectEmissions'],
    title: 'ObjectAllocationResponse'
} as const;

export const $ObjectAttributeDefinition = {
    properties: {
        target: {
            type: 'string',
            enum: ['object'],
            const: 'object',
            title: 'Target'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        unit: {
            anyOf: [
                {
                    properties: {
                        symbol: {
                            anyOf: [
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Symbol',
                            description: 'Unit symbol',
                            examples: ['m/s']
                        },
                        name: {
                            anyOf: [
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            title: 'Name',
                            description: 'Long name of the unit',
                            examples: ['meter/second']
                        },
                        dim: {
                            additionalProperties: {
                                type: 'integer'
                            },
                            type: 'object',
                            title: 'Dim',
                            description: 'The unit dimensionality, compatible with the `pint` python package',
                            examples: [
                                {
                                    '[length]': 1,
                                    '[time]': -1
                                }
                            ]
                        }
                    },
                    type: 'object',
                    required: ['symbol', 'name', 'dim'],
                    title: 'Unit',
                    description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Unit'
        },
        objectType: {
            type: 'string',
            title: 'Objecttype'
        },
        dynamic: {
            type: 'boolean',
            title: 'Dynamic'
        }
    },
    type: 'object',
    required: ['target', 'name', 'objectType', 'dynamic'],
    title: 'ObjectAttributeDefinition'
} as const;

export const $ObjectTypeRequestBody = {
    properties: {
        objectType: {
            type: 'string',
            title: 'Objecttype'
        }
    },
    type: 'object',
    required: ['objectType'],
    title: 'ObjectTypeRequestBody'
} as const;

export const $OcelData = {
    properties: {
        meta: {
            type: 'object',
            title: 'Meta'
        },
        numEvents: {
            type: 'integer',
            title: 'Numevents'
        },
        numObjects: {
            type: 'integer',
            title: 'Numobjects'
        },
        activities: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Activities'
        },
        activityCounts: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Activitycounts'
        },
        objectTypes: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Objecttypes'
        },
        objectTypeCounts: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Objecttypecounts'
        },
        medianNumEventsPerObjectType: {
            additionalProperties: {
                type: 'number'
            },
            type: 'object',
            title: 'Mediannumeventsperobjecttype'
        },
        e2oCounts: {
            additionalProperties: {
                additionalProperties: {
                    type: 'integer'
                },
                type: 'object'
            },
            type: 'object',
            title: 'E2Ocounts'
        },
        e2oQualifierCounts: {
            additionalProperties: {
                additionalProperties: {
                    additionalProperties: {
                        type: 'integer'
                    },
                    type: 'object'
                },
                type: 'object'
            },
            type: 'object',
            title: 'E2Oqualifiercounts'
        },
        attributes: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Attributes'
        }
    },
    type: 'object',
    required: ['meta', 'numEvents', 'numObjects', 'activities', 'activityCounts', 'objectTypes', 'objectTypeCounts', 'medianNumEventsPerObjectType', 'e2oCounts', 'e2oQualifierCounts', 'attributes'],
    title: 'OcelData'
} as const;

export const $OcelEvent = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        activity: {
            type: 'string',
            title: 'Activity'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp'
        },
        attr: {
            type: 'object',
            title: 'Attr'
        }
    },
    type: 'object',
    required: ['id', 'activity', 'timestamp', 'attr'],
    title: 'OcelEvent'
} as const;

export const $OcelObject = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        attr: {
            type: 'object',
            title: 'Attr'
        }
    },
    type: 'object',
    required: ['id', 'type', 'attr'],
    title: 'OcelObject'
} as const;

export const $OcelResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        ocel: {
            '$ref': '#/components/schemas/OcelData'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'ocel'],
    title: 'OcelResponse'
} as const;

export const $OcpnRequestBody = {
    properties: {
        objectTypes: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Objecttypes'
        }
    },
    type: 'object',
    required: ['objectTypes'],
    title: 'OcpnRequestBody'
} as const;

export const $OcpnResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        ocpn: {
            '$ref': '#/components/schemas/OCPN'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'ocpn'],
    title: 'OcpnResponse'
} as const;

export const $OcpnStructure = {
    properties: {
        activityTransitions: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Activitytransitions'
        },
        sourcePlaces: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Sourceplaces'
        },
        targetPlaces: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Targetplaces'
        },
        silentTransitions: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Silenttransitions'
        },
        places: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Places'
        },
        arcs: {
            items: {
                '$ref': '#/components/schemas/Arc'
            },
            type: 'array',
            title: 'Arcs'
        }
    },
    type: 'object',
    required: ['activityTransitions', 'sourcePlaces', 'targetPlaces', 'silentTransitions', 'places', 'arcs'],
    title: 'OcpnStructure'
} as const;

export const $ProcessEmissions = {
    properties: {
        unit: {
            properties: {
                symbol: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    title: 'Symbol',
                    description: 'Unit symbol',
                    examples: ['m/s']
                },
                name: {
                    anyOf: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'null'
                        }
                    ],
                    title: 'Name',
                    description: 'Long name of the unit',
                    examples: ['meter/second']
                },
                dim: {
                    additionalProperties: {
                        type: 'integer'
                    },
                    type: 'object',
                    title: 'Dim',
                    description: 'The unit dimensionality, compatible with the `pint` python package',
                    examples: [
                        {
                            '[length]': 1,
                            '[time]': -1
                        }
                    ]
                }
            },
            type: 'object',
            required: ['symbol', 'name', 'dim'],
            title: 'Unit',
            description: 'A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.'
        },
        apiState: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Apistate'
        },
        overallEmissions: {
            type: 'number',
            title: 'Overallemissions',
            readOnly: true
        },
        overallImportedEmissions: {
            type: 'number',
            title: 'Overallimportedemissions',
            readOnly: true
        },
        overallRuleBasedEmissions: {
            type: 'number',
            title: 'Overallrulebasedemissions',
            readOnly: true
        },
        activityEmissions: {
            additionalProperties: {
                '$ref': '#/components/schemas/NumberStats'
            },
            type: 'object',
            title: 'Activityemissions',
            readOnly: true
        },
        state: {
            '$ref': '#/components/schemas/EmissionsState',
            readOnly: true
        }
    },
    type: 'object',
    required: ['unit', 'overallEmissions', 'overallImportedEmissions', 'overallRuleBasedEmissions', 'activityEmissions', 'state'],
    title: 'ProcessEmissions'
} as const;

export const $QualifiedAttribute = {
    properties: {
        qualifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Qualifier'
        },
        attribute: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/EventAttributeDefinition'
                },
                {
                    '$ref': '#/components/schemas/ObjectAttributeDefinition'
                }
            ],
            title: 'Attribute',
            discriminator: {
                propertyName: 'target',
                mapping: {
                    event: '#/components/schemas/EventAttributeDefinition',
                    object: '#/components/schemas/ObjectAttributeDefinition'
                }
            }
        }
    },
    type: 'object',
    required: ['qualifier', 'attribute'],
    title: 'QualifiedAttribute'
} as const;

export const $SampleEventsResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        events: {
            items: {
                '$ref': '#/components/schemas/OcelEvent'
            },
            type: 'array',
            title: 'Events'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'events'],
    title: 'SampleEventsResponse'
} as const;

export const $SampleObjectsResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        objects: {
            items: {
                '$ref': '#/components/schemas/OcelObject'
            },
            type: 'array',
            title: 'Objects'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'objects'],
    title: 'SampleObjectsResponse'
} as const;

export const $TaskResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        taskState: {
            '$ref': '#/components/schemas/TaskState'
        },
        percentage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Percentage'
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        result: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BaseResponse'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'route', 'taskState'],
    title: 'TaskResponse'
} as const;

export const $TaskState = {
    type: 'string',
    enum: ['PENDING', 'STARTED', 'PROGRESS', 'SUCCESS', 'FAILURE', 'RETRY'],
    title: 'TaskState'
} as const;

export const $TaskStatusResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        task: {
            '$ref': '#/components/schemas/TaskResponse'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'task'],
    title: 'TaskStatusResponse'
} as const;

export const $UpdateAppStateRequestBody = {
    properties: {
        appState: {
            '$ref': '#/components/schemas/AppState-Input',
            description: 'User input to be saved in the server session'
        }
    },
    type: 'object',
    required: ['appState'],
    title: 'UpdateAppStateRequestBody'
} as const;

export const $UpdateAppStateResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['session', 'route', 'state'],
    title: 'UpdateAppStateResponse'
} as const;

export const $ValidateEmissionRuleRequest = {
    properties: {
        rule: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/EventEmissionRule-Input'
                },
                {
                    '$ref': '#/components/schemas/E2OEmissionRule-Input'
                }
            ],
            title: 'Rule',
            discriminator: {
                propertyName: 'type',
                mapping: {
                    E2OEmissionRule: '#/components/schemas/E2OEmissionRule-Input',
                    EventEmissionRule: '#/components/schemas/EventEmissionRule-Input'
                }
            }
        }
    },
    type: 'object',
    required: ['rule'],
    title: 'ValidateEmissionRuleRequest'
} as const;

export const $ValidateEmissionRuleResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        rule: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/EventEmissionRule-Output'
                },
                {
                    '$ref': '#/components/schemas/E2OEmissionRule-Output'
                }
            ],
            title: 'Rule',
            discriminator: {
                propertyName: 'type',
                mapping: {
                    E2OEmissionRule: '#/components/schemas/E2OEmissionRule-Output',
                    EventEmissionRule: '#/components/schemas/EventEmissionRule-Output'
                }
            }
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'rule'],
    title: 'ValidateEmissionRuleResponse'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $WeightedDirectedGraphResponse = {
    properties: {
        session: {
            type: 'string',
            title: 'Session'
        },
        route: {
            type: 'string',
            title: 'Route'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        status: {
            type: 'integer',
            title: 'Status',
            default: 200
        },
        msg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Msg'
        },
        appState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AppState-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        emissions: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessEmissions'
                },
                {
                    type: 'null'
                }
            ]
        },
        graph: {
            additionalProperties: {
                additionalProperties: {
                    type: 'integer'
                },
                type: 'object'
            },
            type: 'object',
            title: 'Graph'
        }
    },
    type: 'object',
    required: ['session', 'route', 'state', 'graph'],
    title: 'WeightedDirectedGraphResponse'
} as const;