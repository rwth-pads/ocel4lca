// This file is auto-generated by @hey-api/openapi-ts

export type AppState_Input = {
    objectTypeColors?: {
    [key: string]: (string);
} | null;
    objectTypeClasses?: {
    [key: string]: ('handling_unit' | 'resource');
} | null;
    attributeUnits?: Array<(EventAttributeDefinition | ObjectAttributeDefinition)> | null;
    emissionAttributes?: Array<(EventAttributeDefinition | ObjectAttributeDefinition)> | null;
    emissionRules?: Array<(EventEmissionRule_Input | E2OEmissionRule_Input)> | null;
    objectAllocationConfig?: ObjectAllocationConfig | null;
};

export type AppState_Output = {
    objectTypeColors?: {
    [key: string]: (string);
} | null;
    objectTypeClasses?: {
    [key: string]: ('handling_unit' | 'resource');
} | null;
    attributeUnits?: Array<(EventAttributeDefinition | ObjectAttributeDefinition)> | null;
    emissionAttributes?: Array<(EventAttributeDefinition | ObjectAttributeDefinition)> | null;
    emissionRules?: Array<(EventEmissionRule_Output | E2OEmissionRule_Output)> | null;
    objectAllocationConfig?: ObjectAllocationConfig | null;
};

export type Arc = {
    source: string;
    target: string;
    double: boolean;
};

export type BaseResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
};

export type Body_import_ocel_import_post = {
    /**
     * An OCEL 2.0 event log (.sqlite format)
     */
    file: (Blob | File);
};

export type ClimatiqDataVersionInformationRemoved = {
    status: 'removed';
    replacedIn: string;
};

export type ClimatiqDataVersionInformationReplaced = {
    status: 'replaced';
    replacedIn: string;
    replacedBy: string;
};

export type ClimatiqDataVersionInformationUpToDate = {
    status: 'up_to_date';
};

export type ClimatiqEmissionFactor_Input = {
    source: 'climatiq';
    attributes: Array<QualifiedAttribute>;
    data: ClimatiqEmissionFactorDetails;
    /**
     * The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.
     */
    value?: {
    value: number;
    unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
} | null;
};

export type ClimatiqEmissionFactor_Output = {
    source: 'climatiq';
    attributes: Array<QualifiedAttribute>;
    data: ClimatiqEmissionFactorDetails;
    /**
     * The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.
     */
    value?: {
    value: number;
    unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
} | null;
};

export type ClimatiqEmissionFactorDetails = {
    id: string;
    activityId: string;
    accessType: 'private' | 'public';
    name: string;
    category: string;
    sector: string;
    source: string;
    sourceLink: string;
    uncertainty?: number | null;
    year: number;
    yearReleased: number;
    region: string;
    regionName: string;
    description: string;
    unit: string;
    unitType: string;
    sourceLcaActivity: string;
    supportedCalculationMethods: Array<('ar4' | 'ar5' | 'ar6')>;
    factor?: number | null;
    factorCalculationMethod?: 'ar4' | 'ar5' | 'ar6' | null;
    constituentGases: {
        [key: string]: (number | null);
    };
    dataVersionInformation: ClimatiqDataVersionInformationUpToDate | ClimatiqDataVersionInformationReplaced | ClimatiqDataVersionInformationRemoved;
};

export type ClimatiqUnitType = {
    unitType: string;
    units: {
        [key: string]: Array<(string)>;
    };
};

export type ComputeEmissionsRequestBody = {
    rules: Array<(EventEmissionRule_Input | E2OEmissionRule_Input)>;
};

export type ComputeEmissionsResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
};

/**
 * Definition of a default OCEL on the server, for quick access. Supports pre-loading the OCEL on backend init.
 */
export type DefaultOCEL = {
    key: string;
    name: string;
    version: string;
    file: string;
    url?: string | null;
    preload?: boolean;
    hide?: boolean;
};

export type DirectedGraphResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    graph: {
        [key: string]: Array<(string)>;
    };
};

export type E2OEmissionRule_Input = {
    index: number;
    name?: string | null;
    activity: string;
    factor: LocalEmissionFactor_Input | ClimatiqEmissionFactor_Input;
    /**
     * Disables validation of the result unit being a weight.
     */
    ignoreUnit?: boolean;
    type: 'E2OEmissionRule';
    objectType: string;
    qualifier?: string | null;
};

export type E2OEmissionRule_Output = {
    index: number;
    name?: string | null;
    activity: string;
    factor: LocalEmissionFactor_Output | ClimatiqEmissionFactor_Output;
    type: 'E2OEmissionRule';
    objectType: string;
    qualifier?: string | null;
    readonly defaultName: string;
};

export type EmissionsState = {
    hasImportedEmissions?: boolean;
    hasRuleBasedEmissions?: boolean;
    hasObjectEmissions: boolean;
    readonly hasEmissions: boolean;
};

export type EventAttributeDefinition = {
    target: 'event';
    name: string;
    unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
    activity: string;
};

export type EventEmissionRule_Input = {
    index: number;
    name?: string | null;
    activity: string;
    factor: LocalEmissionFactor_Input | ClimatiqEmissionFactor_Input;
    /**
     * Disables validation of the result unit being a weight.
     */
    ignoreUnit?: boolean;
    type: 'EventEmissionRule';
};

export type EventEmissionRule_Output = {
    index: number;
    name?: string | null;
    activity: string;
    factor: LocalEmissionFactor_Output | ClimatiqEmissionFactor_Output;
    type: 'EventEmissionRule';
    readonly defaultName: string;
};

export type GetAvailableAttributesRequest = {
    type: 'EventEmissionRule' | 'E2OEmissionRule';
    activity: string;
    objectType?: string | null;
    qualifier?: string | null;
    numericOnly?: boolean;
};

export type GetAvailableAttributesResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    availableEventAttributes: Array<EventAttributeDefinition>;
    availableObjectAttributes: Array<(unknown[])>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LocalEmissionFactor_Input = {
    source: 'local';
    attributes: Array<QualifiedAttribute>;
    /**
     * A quantity (physical, currency, ...), containing a value and (optionally) a unit.
     */
    value: {
        value: number;
        unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
    };
};

export type LocalEmissionFactor_Output = {
    source: 'local';
    attributes: Array<QualifiedAttribute>;
    /**
     * A quantity (physical, currency, ...), containing a value and (optionally) a unit.
     */
    value: {
        value: number;
        unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
    };
};

export type NumberStats = {
    empty: boolean;
    count: number;
    sum: number;
    mean: number;
    min: number;
    median: number;
    max: number;
    nonzero: number;
};

export type OCPN = {
    objectTypes: Array<(string)>;
    dotString: string | null;
    structure: OcpnStructure;
};

export type ObjectAllocationConfig = {
    targetObjectTypes: Array<(string)>;
    rule: 'AllTargets' | 'ParticipatingTargets' | 'ClosestTargets';
    graphMode?: 'full' | 'HU' | null;
    removeOtypeLoops?: boolean | null;
    maxDistance?: number | false | null;
};

export type ObjectAllocationRequestBody = {
    objectAllocationConfig: ObjectAllocationConfig;
};

export type ObjectAllocationResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    objectAllocationConfig: ObjectAllocationConfig;
    objectEmissions: {
        [key: string]: (number);
    };
};

export type ObjectAttributeDefinition = {
    target: 'object';
    name: string;
    unit?: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
    objectType: string;
    dynamic: boolean;
};

export type ObjectTypeRequestBody = {
    objectType: string;
};

export type OcelData = {
    meta: {
        [key: string]: unknown;
    };
    numEvents: number;
    numObjects: number;
    activities: Array<(string)>;
    activityCounts: {
        [key: string]: (number);
    };
    objectTypes: Array<(string)>;
    objectTypeCounts: {
        [key: string]: (number);
    };
    medianNumEventsPerObjectType: {
        [key: string]: (number);
    };
    e2oCounts: {
        [key: string]: {
            [key: string]: (number);
        };
    };
    e2oQualifierCounts: {
        [key: string]: {
            [key: string]: {
                [key: string]: (number);
            };
        };
    };
    attributes: Array<{
        [key: string]: unknown;
    }>;
};

export type OcelEvent = {
    id: string;
    activity: string;
    timestamp: string;
    attr: {
        [key: string]: unknown;
    };
};

export type OcelObject = {
    id: string;
    type: string;
    attr: {
        [key: string]: unknown;
    };
};

export type OcelResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    ocel: OcelData;
};

export type OcpnRequestBody = {
    objectTypes: Array<(string)>;
};

export type OcpnResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    ocpn: OCPN;
};

export type OcpnStructure = {
    activityTransitions: {
        [key: string]: (string);
    };
    sourcePlaces: {
        [key: string]: (string);
    };
    targetPlaces: {
        [key: string]: (string);
    };
    silentTransitions: {
        [key: string]: Array<(string)>;
    };
    places: {
        [key: string]: Array<(string)>;
    };
    arcs: Array<Arc>;
};

export type ProcessEmissions = {
    /**
     * A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.
     */
    unit: {
        /**
         * Unit symbol
         */
        symbol: string | null;
        /**
         * Long name of the unit
         */
        name: string | null;
        /**
         * The unit dimensionality, compatible with the `pint` python package
         */
        dim: {
            [key: string]: (number);
        };
    };
    apiState?: string | null;
    readonly overallEmissions: number;
    readonly overallImportedEmissions: number;
    readonly overallRuleBasedEmissions: number;
    readonly activityEmissions: {
        [key: string]: NumberStats;
    };
    readonly state: EmissionsState;
};

export type QualifiedAttribute = {
    qualifier: string | null;
    attribute: EventAttributeDefinition | ObjectAttributeDefinition;
};

export type SampleEventsResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    events: Array<OcelEvent>;
};

export type SampleObjectsResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    objects: Array<OcelObject>;
};

export type TaskResponse = {
    id: string;
    route: string;
    taskState: TaskState;
    percentage?: number | null;
    msg?: string | null;
    result?: BaseResponse | null;
};

export type TaskState = 'PENDING' | 'STARTED' | 'PROGRESS' | 'SUCCESS' | 'FAILURE' | 'RETRY';

export type TaskStatusResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    task: TaskResponse;
};

export type UpdateAppStateRequestBody = {
    /**
     * User input to be saved in the server session
     */
    appState: AppState_Input;
};

export type UpdateAppStateResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
};

export type ValidateEmissionRuleRequest = {
    rule: EventEmissionRule_Input | E2OEmissionRule_Input;
};

export type ValidateEmissionRuleResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    rule: EventEmissionRule_Output | E2OEmissionRule_Output;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type WeightedDirectedGraphResponse = {
    session: string;
    route: string;
    state: string;
    status?: number;
    msg?: string | null;
    appState?: AppState_Output | null;
    emissions?: ProcessEmissions | null;
    graph: {
        [key: string]: {
            [key: string]: (number);
        };
    };
};

export type $OpenApiTs = {
    '/task-status': {
        get: {
            req: {
                oceanSessionId: string;
                taskId: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: TaskStatusResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/validate-emission-rule': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: ValidateEmissionRuleRequest;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: ValidateEmissionRuleResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/get-available-attributes': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: GetAvailableAttributesRequest;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: GetAvailableAttributesResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/compute-emissions': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: ComputeEmissionsRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: TaskStatusResponse | ComputeEmissionsResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/dfg': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: ObjectTypeRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: WeightedDirectedGraphResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/efg': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: ObjectTypeRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: DirectedGraphResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/ocpn': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: OcpnRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: OcpnResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/object-allocation': {
        post: {
            req: {
                oceanSessionId: string;
                requestBody: ObjectAllocationRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: ObjectAllocationResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/import': {
        post: {
            req: {
                formData: Body_import_ocel_import_post;
                /**
                 * The name of the uploaded file
                 */
                name: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: OcelResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/import-default': {
        get: {
            req: {
                /**
                 * Default OCEL key
                 */
                key: string;
                /**
                 * Dataset version (optional)
                 */
                version?: string | null;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: OcelResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/load': {
        get: {
            req: {
                oceanSessionId: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: OcelResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/download': {
        get: {
            req: {
                /**
                 * Controls on what level emission values are included in the resulting OCEL file as a new attribute. To preserve overall emissions, it is not possible to include both event and object emissions.
                 */
                emissions?: 'events' | 'objects';
                oceanSessionId: string;
                token: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/update': {
        put: {
            req: {
                oceanSessionId: string;
                requestBody: UpdateAppStateRequestBody;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: UpdateAppStateResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sample-objects': {
        get: {
            req: {
                oceanSessionId: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: SampleObjectsResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sample-events': {
        get: {
            req: {
                oceanSessionId: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: SampleEventsResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/ocel/default': {
        get: {
            req: {
                onlyLatestVersions?: boolean;
                onlyPreloaded?: boolean;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: Array<DefaultOCEL>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/climatiq/units/list': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<ClimatiqUnitType>;
            };
        };
    };
    '/units/search': {
        get: {
            req: {
                q: string;
            };
            res: {
                /**
                 * Successful Response
                 */
                200: {
    /**
     * Unit symbol
     */
    symbol: string | null;
    /**
     * Long name of the unit
     */
    name: string | null;
    /**
     * The unit dimensionality, compatible with the `pint` python package
     */
    dim: {
        [key: string]: (number);
    };
} | null;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};